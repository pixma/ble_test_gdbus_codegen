/*
 * This file is generated by gdbus-codegen, do not modify it.
 *
 * The license of this code is the same as for the D-Bus interface description
 * it was derived from. Note that it links to GLib, so must comply with the
 * LGPL linking clauses.
 */

#ifndef __BLE_APP_CLIENT_H__
#define __BLE_APP_CLIENT_H__

#include <gio/gio.h>

G_BEGIN_DECLS


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.AgentManager1 */

#define TYPE_ORG_BLUEZ_AGENT_MANAGER1 (org_bluez_agent_manager1_get_type ())
#define ORG_BLUEZ_AGENT_MANAGER1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_AGENT_MANAGER1, OrgBluezAgentManager1))
#define IS_ORG_BLUEZ_AGENT_MANAGER1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_AGENT_MANAGER1))
#define ORG_BLUEZ_AGENT_MANAGER1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_BLUEZ_AGENT_MANAGER1, OrgBluezAgentManager1Iface))

struct _OrgBluezAgentManager1;
typedef struct _OrgBluezAgentManager1 OrgBluezAgentManager1;
typedef struct _OrgBluezAgentManager1Iface OrgBluezAgentManager1Iface;

struct _OrgBluezAgentManager1Iface
{
  GTypeInterface parent_iface;

  gboolean (*handle_register_agent) (
    OrgBluezAgentManager1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_agent,
    const gchar *arg_capability);

  gboolean (*handle_request_default_agent) (
    OrgBluezAgentManager1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_agent);

  gboolean (*handle_unregister_agent) (
    OrgBluezAgentManager1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_agent);

};

GType org_bluez_agent_manager1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_bluez_agent_manager1_interface_info (void);
guint org_bluez_agent_manager1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_bluez_agent_manager1_complete_register_agent (
    OrgBluezAgentManager1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_agent_manager1_complete_unregister_agent (
    OrgBluezAgentManager1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_agent_manager1_complete_request_default_agent (
    OrgBluezAgentManager1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void org_bluez_agent_manager1_call_register_agent (
    OrgBluezAgentManager1 *proxy,
    const gchar *arg_agent,
    const gchar *arg_capability,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_agent_manager1_call_register_agent_finish (
    OrgBluezAgentManager1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_agent_manager1_call_register_agent_sync (
    OrgBluezAgentManager1 *proxy,
    const gchar *arg_agent,
    const gchar *arg_capability,
    GCancellable *cancellable,
    GError **error);

void org_bluez_agent_manager1_call_unregister_agent (
    OrgBluezAgentManager1 *proxy,
    const gchar *arg_agent,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_agent_manager1_call_unregister_agent_finish (
    OrgBluezAgentManager1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_agent_manager1_call_unregister_agent_sync (
    OrgBluezAgentManager1 *proxy,
    const gchar *arg_agent,
    GCancellable *cancellable,
    GError **error);

void org_bluez_agent_manager1_call_request_default_agent (
    OrgBluezAgentManager1 *proxy,
    const gchar *arg_agent,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_agent_manager1_call_request_default_agent_finish (
    OrgBluezAgentManager1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_agent_manager1_call_request_default_agent_sync (
    OrgBluezAgentManager1 *proxy,
    const gchar *arg_agent,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_BLUEZ_AGENT_MANAGER1_PROXY (org_bluez_agent_manager1_proxy_get_type ())
#define ORG_BLUEZ_AGENT_MANAGER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_AGENT_MANAGER1_PROXY, OrgBluezAgentManager1Proxy))
#define ORG_BLUEZ_AGENT_MANAGER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_AGENT_MANAGER1_PROXY, OrgBluezAgentManager1ProxyClass))
#define ORG_BLUEZ_AGENT_MANAGER1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_AGENT_MANAGER1_PROXY, OrgBluezAgentManager1ProxyClass))
#define IS_ORG_BLUEZ_AGENT_MANAGER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_AGENT_MANAGER1_PROXY))
#define IS_ORG_BLUEZ_AGENT_MANAGER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_AGENT_MANAGER1_PROXY))

typedef struct _OrgBluezAgentManager1Proxy OrgBluezAgentManager1Proxy;
typedef struct _OrgBluezAgentManager1ProxyClass OrgBluezAgentManager1ProxyClass;
typedef struct _OrgBluezAgentManager1ProxyPrivate OrgBluezAgentManager1ProxyPrivate;

struct _OrgBluezAgentManager1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgBluezAgentManager1ProxyPrivate *priv;
};

struct _OrgBluezAgentManager1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_bluez_agent_manager1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezAgentManager1Proxy, g_object_unref)
#endif

void org_bluez_agent_manager1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezAgentManager1 *org_bluez_agent_manager1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezAgentManager1 *org_bluez_agent_manager1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_bluez_agent_manager1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezAgentManager1 *org_bluez_agent_manager1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezAgentManager1 *org_bluez_agent_manager1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_BLUEZ_AGENT_MANAGER1_SKELETON (org_bluez_agent_manager1_skeleton_get_type ())
#define ORG_BLUEZ_AGENT_MANAGER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_AGENT_MANAGER1_SKELETON, OrgBluezAgentManager1Skeleton))
#define ORG_BLUEZ_AGENT_MANAGER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_AGENT_MANAGER1_SKELETON, OrgBluezAgentManager1SkeletonClass))
#define ORG_BLUEZ_AGENT_MANAGER1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_AGENT_MANAGER1_SKELETON, OrgBluezAgentManager1SkeletonClass))
#define IS_ORG_BLUEZ_AGENT_MANAGER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_AGENT_MANAGER1_SKELETON))
#define IS_ORG_BLUEZ_AGENT_MANAGER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_AGENT_MANAGER1_SKELETON))

typedef struct _OrgBluezAgentManager1Skeleton OrgBluezAgentManager1Skeleton;
typedef struct _OrgBluezAgentManager1SkeletonClass OrgBluezAgentManager1SkeletonClass;
typedef struct _OrgBluezAgentManager1SkeletonPrivate OrgBluezAgentManager1SkeletonPrivate;

struct _OrgBluezAgentManager1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgBluezAgentManager1SkeletonPrivate *priv;
};

struct _OrgBluezAgentManager1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_bluez_agent_manager1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezAgentManager1Skeleton, g_object_unref)
#endif

OrgBluezAgentManager1 *org_bluez_agent_manager1_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.ProfileManager1 */

#define TYPE_ORG_BLUEZ_PROFILE_MANAGER1 (org_bluez_profile_manager1_get_type ())
#define ORG_BLUEZ_PROFILE_MANAGER1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_PROFILE_MANAGER1, OrgBluezProfileManager1))
#define IS_ORG_BLUEZ_PROFILE_MANAGER1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_PROFILE_MANAGER1))
#define ORG_BLUEZ_PROFILE_MANAGER1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_BLUEZ_PROFILE_MANAGER1, OrgBluezProfileManager1Iface))

struct _OrgBluezProfileManager1;
typedef struct _OrgBluezProfileManager1 OrgBluezProfileManager1;
typedef struct _OrgBluezProfileManager1Iface OrgBluezProfileManager1Iface;

struct _OrgBluezProfileManager1Iface
{
  GTypeInterface parent_iface;

  gboolean (*handle_register_profile) (
    OrgBluezProfileManager1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_profile,
    const gchar *arg_UUID,
    GVariant *arg_options);

  gboolean (*handle_unregister_profile) (
    OrgBluezProfileManager1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_profile);

};

GType org_bluez_profile_manager1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_bluez_profile_manager1_interface_info (void);
guint org_bluez_profile_manager1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_bluez_profile_manager1_complete_register_profile (
    OrgBluezProfileManager1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_profile_manager1_complete_unregister_profile (
    OrgBluezProfileManager1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void org_bluez_profile_manager1_call_register_profile (
    OrgBluezProfileManager1 *proxy,
    const gchar *arg_profile,
    const gchar *arg_UUID,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_profile_manager1_call_register_profile_finish (
    OrgBluezProfileManager1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_profile_manager1_call_register_profile_sync (
    OrgBluezProfileManager1 *proxy,
    const gchar *arg_profile,
    const gchar *arg_UUID,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);

void org_bluez_profile_manager1_call_unregister_profile (
    OrgBluezProfileManager1 *proxy,
    const gchar *arg_profile,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_profile_manager1_call_unregister_profile_finish (
    OrgBluezProfileManager1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_profile_manager1_call_unregister_profile_sync (
    OrgBluezProfileManager1 *proxy,
    const gchar *arg_profile,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_BLUEZ_PROFILE_MANAGER1_PROXY (org_bluez_profile_manager1_proxy_get_type ())
#define ORG_BLUEZ_PROFILE_MANAGER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_PROFILE_MANAGER1_PROXY, OrgBluezProfileManager1Proxy))
#define ORG_BLUEZ_PROFILE_MANAGER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_PROFILE_MANAGER1_PROXY, OrgBluezProfileManager1ProxyClass))
#define ORG_BLUEZ_PROFILE_MANAGER1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_PROFILE_MANAGER1_PROXY, OrgBluezProfileManager1ProxyClass))
#define IS_ORG_BLUEZ_PROFILE_MANAGER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_PROFILE_MANAGER1_PROXY))
#define IS_ORG_BLUEZ_PROFILE_MANAGER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_PROFILE_MANAGER1_PROXY))

typedef struct _OrgBluezProfileManager1Proxy OrgBluezProfileManager1Proxy;
typedef struct _OrgBluezProfileManager1ProxyClass OrgBluezProfileManager1ProxyClass;
typedef struct _OrgBluezProfileManager1ProxyPrivate OrgBluezProfileManager1ProxyPrivate;

struct _OrgBluezProfileManager1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgBluezProfileManager1ProxyPrivate *priv;
};

struct _OrgBluezProfileManager1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_bluez_profile_manager1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezProfileManager1Proxy, g_object_unref)
#endif

void org_bluez_profile_manager1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezProfileManager1 *org_bluez_profile_manager1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezProfileManager1 *org_bluez_profile_manager1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_bluez_profile_manager1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezProfileManager1 *org_bluez_profile_manager1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezProfileManager1 *org_bluez_profile_manager1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_BLUEZ_PROFILE_MANAGER1_SKELETON (org_bluez_profile_manager1_skeleton_get_type ())
#define ORG_BLUEZ_PROFILE_MANAGER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_PROFILE_MANAGER1_SKELETON, OrgBluezProfileManager1Skeleton))
#define ORG_BLUEZ_PROFILE_MANAGER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_PROFILE_MANAGER1_SKELETON, OrgBluezProfileManager1SkeletonClass))
#define ORG_BLUEZ_PROFILE_MANAGER1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_PROFILE_MANAGER1_SKELETON, OrgBluezProfileManager1SkeletonClass))
#define IS_ORG_BLUEZ_PROFILE_MANAGER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_PROFILE_MANAGER1_SKELETON))
#define IS_ORG_BLUEZ_PROFILE_MANAGER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_PROFILE_MANAGER1_SKELETON))

typedef struct _OrgBluezProfileManager1Skeleton OrgBluezProfileManager1Skeleton;
typedef struct _OrgBluezProfileManager1SkeletonClass OrgBluezProfileManager1SkeletonClass;
typedef struct _OrgBluezProfileManager1SkeletonPrivate OrgBluezProfileManager1SkeletonPrivate;

struct _OrgBluezProfileManager1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgBluezProfileManager1SkeletonPrivate *priv;
};

struct _OrgBluezProfileManager1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_bluez_profile_manager1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezProfileManager1Skeleton, g_object_unref)
#endif

OrgBluezProfileManager1 *org_bluez_profile_manager1_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.Adapter1 */

#define TYPE_ORG_BLUEZ_ADAPTER1 (org_bluez_adapter1_get_type ())
#define ORG_BLUEZ_ADAPTER1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_ADAPTER1, OrgBluezAdapter1))
#define IS_ORG_BLUEZ_ADAPTER1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_ADAPTER1))
#define ORG_BLUEZ_ADAPTER1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_BLUEZ_ADAPTER1, OrgBluezAdapter1Iface))

struct _OrgBluezAdapter1;
typedef struct _OrgBluezAdapter1 OrgBluezAdapter1;
typedef struct _OrgBluezAdapter1Iface OrgBluezAdapter1Iface;

struct _OrgBluezAdapter1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_discovery_filters) (
    OrgBluezAdapter1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_remove_device) (
    OrgBluezAdapter1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_device);

  gboolean (*handle_set_discovery_filter) (
    OrgBluezAdapter1 *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_properties);

  gboolean (*handle_start_discovery) (
    OrgBluezAdapter1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop_discovery) (
    OrgBluezAdapter1 *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_address) (OrgBluezAdapter1 *object);

  const gchar * (*get_address_type) (OrgBluezAdapter1 *object);

  const gchar * (*get_alias) (OrgBluezAdapter1 *object);

  guint  (*get_class) (OrgBluezAdapter1 *object);

  gboolean  (*get_discoverable) (OrgBluezAdapter1 *object);

  guint  (*get_discoverable_timeout) (OrgBluezAdapter1 *object);

  gboolean  (*get_discovering) (OrgBluezAdapter1 *object);

  const gchar * (*get_modalias) (OrgBluezAdapter1 *object);

  const gchar * (*get_name) (OrgBluezAdapter1 *object);

  gboolean  (*get_pairable) (OrgBluezAdapter1 *object);

  guint  (*get_pairable_timeout) (OrgBluezAdapter1 *object);

  gboolean  (*get_powered) (OrgBluezAdapter1 *object);

  const gchar *const * (*get_roles) (OrgBluezAdapter1 *object);

  const gchar *const * (*get_uuids) (OrgBluezAdapter1 *object);

};

GType org_bluez_adapter1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_bluez_adapter1_interface_info (void);
guint org_bluez_adapter1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_bluez_adapter1_complete_start_discovery (
    OrgBluezAdapter1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_adapter1_complete_set_discovery_filter (
    OrgBluezAdapter1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_adapter1_complete_stop_discovery (
    OrgBluezAdapter1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_adapter1_complete_remove_device (
    OrgBluezAdapter1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_adapter1_complete_get_discovery_filters (
    OrgBluezAdapter1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *const *filters);



/* D-Bus method calls: */
void org_bluez_adapter1_call_start_discovery (
    OrgBluezAdapter1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_adapter1_call_start_discovery_finish (
    OrgBluezAdapter1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_adapter1_call_start_discovery_sync (
    OrgBluezAdapter1 *proxy,
    GCancellable *cancellable,
    GError **error);

void org_bluez_adapter1_call_set_discovery_filter (
    OrgBluezAdapter1 *proxy,
    GVariant *arg_properties,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_adapter1_call_set_discovery_filter_finish (
    OrgBluezAdapter1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_adapter1_call_set_discovery_filter_sync (
    OrgBluezAdapter1 *proxy,
    GVariant *arg_properties,
    GCancellable *cancellable,
    GError **error);

void org_bluez_adapter1_call_stop_discovery (
    OrgBluezAdapter1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_adapter1_call_stop_discovery_finish (
    OrgBluezAdapter1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_adapter1_call_stop_discovery_sync (
    OrgBluezAdapter1 *proxy,
    GCancellable *cancellable,
    GError **error);

void org_bluez_adapter1_call_remove_device (
    OrgBluezAdapter1 *proxy,
    const gchar *arg_device,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_adapter1_call_remove_device_finish (
    OrgBluezAdapter1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_adapter1_call_remove_device_sync (
    OrgBluezAdapter1 *proxy,
    const gchar *arg_device,
    GCancellable *cancellable,
    GError **error);

void org_bluez_adapter1_call_get_discovery_filters (
    OrgBluezAdapter1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_adapter1_call_get_discovery_filters_finish (
    OrgBluezAdapter1 *proxy,
    gchar ***out_filters,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_adapter1_call_get_discovery_filters_sync (
    OrgBluezAdapter1 *proxy,
    gchar ***out_filters,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *org_bluez_adapter1_get_address (OrgBluezAdapter1 *object);
gchar *org_bluez_adapter1_dup_address (OrgBluezAdapter1 *object);
void org_bluez_adapter1_set_address (OrgBluezAdapter1 *object, const gchar *value);

const gchar *org_bluez_adapter1_get_address_type (OrgBluezAdapter1 *object);
gchar *org_bluez_adapter1_dup_address_type (OrgBluezAdapter1 *object);
void org_bluez_adapter1_set_address_type (OrgBluezAdapter1 *object, const gchar *value);

const gchar *org_bluez_adapter1_get_name (OrgBluezAdapter1 *object);
gchar *org_bluez_adapter1_dup_name (OrgBluezAdapter1 *object);
void org_bluez_adapter1_set_name (OrgBluezAdapter1 *object, const gchar *value);

const gchar *org_bluez_adapter1_get_alias (OrgBluezAdapter1 *object);
gchar *org_bluez_adapter1_dup_alias (OrgBluezAdapter1 *object);
void org_bluez_adapter1_set_alias (OrgBluezAdapter1 *object, const gchar *value);

guint org_bluez_adapter1_get_class (OrgBluezAdapter1 *object);
void org_bluez_adapter1_set_class (OrgBluezAdapter1 *object, guint value);

gboolean org_bluez_adapter1_get_powered (OrgBluezAdapter1 *object);
void org_bluez_adapter1_set_powered (OrgBluezAdapter1 *object, gboolean value);

gboolean org_bluez_adapter1_get_discoverable (OrgBluezAdapter1 *object);
void org_bluez_adapter1_set_discoverable (OrgBluezAdapter1 *object, gboolean value);

guint org_bluez_adapter1_get_discoverable_timeout (OrgBluezAdapter1 *object);
void org_bluez_adapter1_set_discoverable_timeout (OrgBluezAdapter1 *object, guint value);

gboolean org_bluez_adapter1_get_pairable (OrgBluezAdapter1 *object);
void org_bluez_adapter1_set_pairable (OrgBluezAdapter1 *object, gboolean value);

guint org_bluez_adapter1_get_pairable_timeout (OrgBluezAdapter1 *object);
void org_bluez_adapter1_set_pairable_timeout (OrgBluezAdapter1 *object, guint value);

gboolean org_bluez_adapter1_get_discovering (OrgBluezAdapter1 *object);
void org_bluez_adapter1_set_discovering (OrgBluezAdapter1 *object, gboolean value);

const gchar *const *org_bluez_adapter1_get_uuids (OrgBluezAdapter1 *object);
gchar **org_bluez_adapter1_dup_uuids (OrgBluezAdapter1 *object);
void org_bluez_adapter1_set_uuids (OrgBluezAdapter1 *object, const gchar *const *value);

const gchar *org_bluez_adapter1_get_modalias (OrgBluezAdapter1 *object);
gchar *org_bluez_adapter1_dup_modalias (OrgBluezAdapter1 *object);
void org_bluez_adapter1_set_modalias (OrgBluezAdapter1 *object, const gchar *value);

const gchar *const *org_bluez_adapter1_get_roles (OrgBluezAdapter1 *object);
gchar **org_bluez_adapter1_dup_roles (OrgBluezAdapter1 *object);
void org_bluez_adapter1_set_roles (OrgBluezAdapter1 *object, const gchar *const *value);


/* ---- */

#define TYPE_ORG_BLUEZ_ADAPTER1_PROXY (org_bluez_adapter1_proxy_get_type ())
#define ORG_BLUEZ_ADAPTER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_ADAPTER1_PROXY, OrgBluezAdapter1Proxy))
#define ORG_BLUEZ_ADAPTER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_ADAPTER1_PROXY, OrgBluezAdapter1ProxyClass))
#define ORG_BLUEZ_ADAPTER1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_ADAPTER1_PROXY, OrgBluezAdapter1ProxyClass))
#define IS_ORG_BLUEZ_ADAPTER1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_ADAPTER1_PROXY))
#define IS_ORG_BLUEZ_ADAPTER1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_ADAPTER1_PROXY))

typedef struct _OrgBluezAdapter1Proxy OrgBluezAdapter1Proxy;
typedef struct _OrgBluezAdapter1ProxyClass OrgBluezAdapter1ProxyClass;
typedef struct _OrgBluezAdapter1ProxyPrivate OrgBluezAdapter1ProxyPrivate;

struct _OrgBluezAdapter1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgBluezAdapter1ProxyPrivate *priv;
};

struct _OrgBluezAdapter1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_bluez_adapter1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezAdapter1Proxy, g_object_unref)
#endif

void org_bluez_adapter1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezAdapter1 *org_bluez_adapter1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezAdapter1 *org_bluez_adapter1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_bluez_adapter1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezAdapter1 *org_bluez_adapter1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezAdapter1 *org_bluez_adapter1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_BLUEZ_ADAPTER1_SKELETON (org_bluez_adapter1_skeleton_get_type ())
#define ORG_BLUEZ_ADAPTER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_ADAPTER1_SKELETON, OrgBluezAdapter1Skeleton))
#define ORG_BLUEZ_ADAPTER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_ADAPTER1_SKELETON, OrgBluezAdapter1SkeletonClass))
#define ORG_BLUEZ_ADAPTER1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_ADAPTER1_SKELETON, OrgBluezAdapter1SkeletonClass))
#define IS_ORG_BLUEZ_ADAPTER1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_ADAPTER1_SKELETON))
#define IS_ORG_BLUEZ_ADAPTER1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_ADAPTER1_SKELETON))

typedef struct _OrgBluezAdapter1Skeleton OrgBluezAdapter1Skeleton;
typedef struct _OrgBluezAdapter1SkeletonClass OrgBluezAdapter1SkeletonClass;
typedef struct _OrgBluezAdapter1SkeletonPrivate OrgBluezAdapter1SkeletonPrivate;

struct _OrgBluezAdapter1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgBluezAdapter1SkeletonPrivate *priv;
};

struct _OrgBluezAdapter1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_bluez_adapter1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezAdapter1Skeleton, g_object_unref)
#endif

OrgBluezAdapter1 *org_bluez_adapter1_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.Device1 */

#define TYPE_ORG_BLUEZ_DEVICE1 (org_bluez_device1_get_type ())
#define ORG_BLUEZ_DEVICE1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_DEVICE1, OrgBluezDevice1))
#define IS_ORG_BLUEZ_DEVICE1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_DEVICE1))
#define ORG_BLUEZ_DEVICE1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_BLUEZ_DEVICE1, OrgBluezDevice1Iface))

struct _OrgBluezDevice1;
typedef struct _OrgBluezDevice1 OrgBluezDevice1;
typedef struct _OrgBluezDevice1Iface OrgBluezDevice1Iface;

struct _OrgBluezDevice1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_cancel_pairing) (
    OrgBluezDevice1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_connect) (
    OrgBluezDevice1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_connect_profile) (
    OrgBluezDevice1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_UUID);

  gboolean (*handle_disconnect) (
    OrgBluezDevice1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_disconnect_profile) (
    OrgBluezDevice1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_UUID);

  gboolean (*handle_pair) (
    OrgBluezDevice1 *object,
    GDBusMethodInvocation *invocation);

  const gchar * (*get_adapter) (OrgBluezDevice1 *object);

  const gchar * (*get_address) (OrgBluezDevice1 *object);

  const gchar * (*get_address_type) (OrgBluezDevice1 *object);

  const gchar * (*get_alias) (OrgBluezDevice1 *object);

  guint16  (*get_appearance) (OrgBluezDevice1 *object);

  gboolean  (*get_blocked) (OrgBluezDevice1 *object);

  guint  (*get_class) (OrgBluezDevice1 *object);

  gboolean  (*get_connected) (OrgBluezDevice1 *object);

  const gchar * (*get_icon) (OrgBluezDevice1 *object);

  gboolean  (*get_legacy_pairing) (OrgBluezDevice1 *object);

  GVariant * (*get_manufacturer_data) (OrgBluezDevice1 *object);

  const gchar * (*get_modalias) (OrgBluezDevice1 *object);

  const gchar * (*get_name) (OrgBluezDevice1 *object);

  gboolean  (*get_paired) (OrgBluezDevice1 *object);

  gint16  (*get_rssi) (OrgBluezDevice1 *object);

  GVariant * (*get_service_data) (OrgBluezDevice1 *object);

  gboolean  (*get_services_resolved) (OrgBluezDevice1 *object);

  gboolean  (*get_trusted) (OrgBluezDevice1 *object);

  gint16  (*get_tx_power) (OrgBluezDevice1 *object);

  const gchar *const * (*get_uuids) (OrgBluezDevice1 *object);

  gboolean  (*get_wake_allowed) (OrgBluezDevice1 *object);

};

GType org_bluez_device1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_bluez_device1_interface_info (void);
guint org_bluez_device1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_bluez_device1_complete_disconnect (
    OrgBluezDevice1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_device1_complete_connect (
    OrgBluezDevice1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_device1_complete_connect_profile (
    OrgBluezDevice1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_device1_complete_disconnect_profile (
    OrgBluezDevice1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_device1_complete_pair (
    OrgBluezDevice1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_device1_complete_cancel_pairing (
    OrgBluezDevice1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void org_bluez_device1_call_disconnect (
    OrgBluezDevice1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_device1_call_disconnect_finish (
    OrgBluezDevice1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_device1_call_disconnect_sync (
    OrgBluezDevice1 *proxy,
    GCancellable *cancellable,
    GError **error);

void org_bluez_device1_call_connect (
    OrgBluezDevice1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_device1_call_connect_finish (
    OrgBluezDevice1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_device1_call_connect_sync (
    OrgBluezDevice1 *proxy,
    GCancellable *cancellable,
    GError **error);

void org_bluez_device1_call_connect_profile (
    OrgBluezDevice1 *proxy,
    const gchar *arg_UUID,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_device1_call_connect_profile_finish (
    OrgBluezDevice1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_device1_call_connect_profile_sync (
    OrgBluezDevice1 *proxy,
    const gchar *arg_UUID,
    GCancellable *cancellable,
    GError **error);

void org_bluez_device1_call_disconnect_profile (
    OrgBluezDevice1 *proxy,
    const gchar *arg_UUID,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_device1_call_disconnect_profile_finish (
    OrgBluezDevice1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_device1_call_disconnect_profile_sync (
    OrgBluezDevice1 *proxy,
    const gchar *arg_UUID,
    GCancellable *cancellable,
    GError **error);

void org_bluez_device1_call_pair (
    OrgBluezDevice1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_device1_call_pair_finish (
    OrgBluezDevice1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_device1_call_pair_sync (
    OrgBluezDevice1 *proxy,
    GCancellable *cancellable,
    GError **error);

void org_bluez_device1_call_cancel_pairing (
    OrgBluezDevice1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_device1_call_cancel_pairing_finish (
    OrgBluezDevice1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_device1_call_cancel_pairing_sync (
    OrgBluezDevice1 *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *org_bluez_device1_get_address (OrgBluezDevice1 *object);
gchar *org_bluez_device1_dup_address (OrgBluezDevice1 *object);
void org_bluez_device1_set_address (OrgBluezDevice1 *object, const gchar *value);

const gchar *org_bluez_device1_get_address_type (OrgBluezDevice1 *object);
gchar *org_bluez_device1_dup_address_type (OrgBluezDevice1 *object);
void org_bluez_device1_set_address_type (OrgBluezDevice1 *object, const gchar *value);

const gchar *org_bluez_device1_get_name (OrgBluezDevice1 *object);
gchar *org_bluez_device1_dup_name (OrgBluezDevice1 *object);
void org_bluez_device1_set_name (OrgBluezDevice1 *object, const gchar *value);

const gchar *org_bluez_device1_get_alias (OrgBluezDevice1 *object);
gchar *org_bluez_device1_dup_alias (OrgBluezDevice1 *object);
void org_bluez_device1_set_alias (OrgBluezDevice1 *object, const gchar *value);

guint org_bluez_device1_get_class (OrgBluezDevice1 *object);
void org_bluez_device1_set_class (OrgBluezDevice1 *object, guint value);

guint16 org_bluez_device1_get_appearance (OrgBluezDevice1 *object);
void org_bluez_device1_set_appearance (OrgBluezDevice1 *object, guint16 value);

const gchar *org_bluez_device1_get_icon (OrgBluezDevice1 *object);
gchar *org_bluez_device1_dup_icon (OrgBluezDevice1 *object);
void org_bluez_device1_set_icon (OrgBluezDevice1 *object, const gchar *value);

gboolean org_bluez_device1_get_paired (OrgBluezDevice1 *object);
void org_bluez_device1_set_paired (OrgBluezDevice1 *object, gboolean value);

gboolean org_bluez_device1_get_trusted (OrgBluezDevice1 *object);
void org_bluez_device1_set_trusted (OrgBluezDevice1 *object, gboolean value);

gboolean org_bluez_device1_get_blocked (OrgBluezDevice1 *object);
void org_bluez_device1_set_blocked (OrgBluezDevice1 *object, gboolean value);

gboolean org_bluez_device1_get_legacy_pairing (OrgBluezDevice1 *object);
void org_bluez_device1_set_legacy_pairing (OrgBluezDevice1 *object, gboolean value);

gint16 org_bluez_device1_get_rssi (OrgBluezDevice1 *object);
void org_bluez_device1_set_rssi (OrgBluezDevice1 *object, gint16 value);

gboolean org_bluez_device1_get_connected (OrgBluezDevice1 *object);
void org_bluez_device1_set_connected (OrgBluezDevice1 *object, gboolean value);

const gchar *const *org_bluez_device1_get_uuids (OrgBluezDevice1 *object);
gchar **org_bluez_device1_dup_uuids (OrgBluezDevice1 *object);
void org_bluez_device1_set_uuids (OrgBluezDevice1 *object, const gchar *const *value);

const gchar *org_bluez_device1_get_modalias (OrgBluezDevice1 *object);
gchar *org_bluez_device1_dup_modalias (OrgBluezDevice1 *object);
void org_bluez_device1_set_modalias (OrgBluezDevice1 *object, const gchar *value);

const gchar *org_bluez_device1_get_adapter (OrgBluezDevice1 *object);
gchar *org_bluez_device1_dup_adapter (OrgBluezDevice1 *object);
void org_bluez_device1_set_adapter (OrgBluezDevice1 *object, const gchar *value);

GVariant *org_bluez_device1_get_manufacturer_data (OrgBluezDevice1 *object);
GVariant *org_bluez_device1_dup_manufacturer_data (OrgBluezDevice1 *object);
void org_bluez_device1_set_manufacturer_data (OrgBluezDevice1 *object, GVariant *value);

GVariant *org_bluez_device1_get_service_data (OrgBluezDevice1 *object);
GVariant *org_bluez_device1_dup_service_data (OrgBluezDevice1 *object);
void org_bluez_device1_set_service_data (OrgBluezDevice1 *object, GVariant *value);

gint16 org_bluez_device1_get_tx_power (OrgBluezDevice1 *object);
void org_bluez_device1_set_tx_power (OrgBluezDevice1 *object, gint16 value);

gboolean org_bluez_device1_get_services_resolved (OrgBluezDevice1 *object);
void org_bluez_device1_set_services_resolved (OrgBluezDevice1 *object, gboolean value);

gboolean org_bluez_device1_get_wake_allowed (OrgBluezDevice1 *object);
void org_bluez_device1_set_wake_allowed (OrgBluezDevice1 *object, gboolean value);


/* ---- */

#define TYPE_ORG_BLUEZ_DEVICE1_PROXY (org_bluez_device1_proxy_get_type ())
#define ORG_BLUEZ_DEVICE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_DEVICE1_PROXY, OrgBluezDevice1Proxy))
#define ORG_BLUEZ_DEVICE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_DEVICE1_PROXY, OrgBluezDevice1ProxyClass))
#define ORG_BLUEZ_DEVICE1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_DEVICE1_PROXY, OrgBluezDevice1ProxyClass))
#define IS_ORG_BLUEZ_DEVICE1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_DEVICE1_PROXY))
#define IS_ORG_BLUEZ_DEVICE1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_DEVICE1_PROXY))

typedef struct _OrgBluezDevice1Proxy OrgBluezDevice1Proxy;
typedef struct _OrgBluezDevice1ProxyClass OrgBluezDevice1ProxyClass;
typedef struct _OrgBluezDevice1ProxyPrivate OrgBluezDevice1ProxyPrivate;

struct _OrgBluezDevice1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgBluezDevice1ProxyPrivate *priv;
};

struct _OrgBluezDevice1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_bluez_device1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezDevice1Proxy, g_object_unref)
#endif

void org_bluez_device1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezDevice1 *org_bluez_device1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezDevice1 *org_bluez_device1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_bluez_device1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezDevice1 *org_bluez_device1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezDevice1 *org_bluez_device1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_BLUEZ_DEVICE1_SKELETON (org_bluez_device1_skeleton_get_type ())
#define ORG_BLUEZ_DEVICE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_DEVICE1_SKELETON, OrgBluezDevice1Skeleton))
#define ORG_BLUEZ_DEVICE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_DEVICE1_SKELETON, OrgBluezDevice1SkeletonClass))
#define ORG_BLUEZ_DEVICE1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_DEVICE1_SKELETON, OrgBluezDevice1SkeletonClass))
#define IS_ORG_BLUEZ_DEVICE1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_DEVICE1_SKELETON))
#define IS_ORG_BLUEZ_DEVICE1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_DEVICE1_SKELETON))

typedef struct _OrgBluezDevice1Skeleton OrgBluezDevice1Skeleton;
typedef struct _OrgBluezDevice1SkeletonClass OrgBluezDevice1SkeletonClass;
typedef struct _OrgBluezDevice1SkeletonPrivate OrgBluezDevice1SkeletonPrivate;

struct _OrgBluezDevice1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgBluezDevice1SkeletonPrivate *priv;
};

struct _OrgBluezDevice1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_bluez_device1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezDevice1Skeleton, g_object_unref)
#endif

OrgBluezDevice1 *org_bluez_device1_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.GattCharacteristic1 */

#define TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1 (org_bluez_gatt_characteristic1_get_type ())
#define ORG_BLUEZ_GATT_CHARACTERISTIC1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1, OrgBluezGattCharacteristic1))
#define IS_ORG_BLUEZ_GATT_CHARACTERISTIC1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1))
#define ORG_BLUEZ_GATT_CHARACTERISTIC1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1, OrgBluezGattCharacteristic1Iface))

struct _OrgBluezGattCharacteristic1;
typedef struct _OrgBluezGattCharacteristic1 OrgBluezGattCharacteristic1;
typedef struct _OrgBluezGattCharacteristic1Iface OrgBluezGattCharacteristic1Iface;

struct _OrgBluezGattCharacteristic1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_acquire_notify) (
    OrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_options);

  gboolean (*handle_acquire_write) (
    OrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_options);

  gboolean (*handle_read_value) (
    OrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_options);

  gboolean (*handle_start_notify) (
    OrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_stop_notify) (
    OrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation);

  gboolean (*handle_write_value) (
    OrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_value,
    GVariant *arg_options);

  const gchar *const * (*get_flags) (OrgBluezGattCharacteristic1 *object);

  gboolean  (*get_notify_acquired) (OrgBluezGattCharacteristic1 *object);

  gboolean  (*get_notifying) (OrgBluezGattCharacteristic1 *object);

  const gchar * (*get_service) (OrgBluezGattCharacteristic1 *object);

  const gchar * (*get_uuid) (OrgBluezGattCharacteristic1 *object);

  const gchar * (*get_value) (OrgBluezGattCharacteristic1 *object);

  gboolean  (*get_write_acquired) (OrgBluezGattCharacteristic1 *object);

};

GType org_bluez_gatt_characteristic1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_bluez_gatt_characteristic1_interface_info (void);
guint org_bluez_gatt_characteristic1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_bluez_gatt_characteristic1_complete_read_value (
    OrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *value);

void org_bluez_gatt_characteristic1_complete_write_value (
    OrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_gatt_characteristic1_complete_acquire_write (
    OrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation,
    GVariant *fd,
    guint16 mtu);

void org_bluez_gatt_characteristic1_complete_acquire_notify (
    OrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation,
    GVariant *fd,
    guint16 mtu);

void org_bluez_gatt_characteristic1_complete_start_notify (
    OrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation);

void org_bluez_gatt_characteristic1_complete_stop_notify (
    OrgBluezGattCharacteristic1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void org_bluez_gatt_characteristic1_call_read_value (
    OrgBluezGattCharacteristic1 *proxy,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_gatt_characteristic1_call_read_value_finish (
    OrgBluezGattCharacteristic1 *proxy,
    gchar **out_value,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_gatt_characteristic1_call_read_value_sync (
    OrgBluezGattCharacteristic1 *proxy,
    GVariant *arg_options,
    gchar **out_value,
    GCancellable *cancellable,
    GError **error);

void org_bluez_gatt_characteristic1_call_write_value (
    OrgBluezGattCharacteristic1 *proxy,
    const gchar *arg_value,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_gatt_characteristic1_call_write_value_finish (
    OrgBluezGattCharacteristic1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_gatt_characteristic1_call_write_value_sync (
    OrgBluezGattCharacteristic1 *proxy,
    const gchar *arg_value,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);

void org_bluez_gatt_characteristic1_call_acquire_write (
    OrgBluezGattCharacteristic1 *proxy,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_gatt_characteristic1_call_acquire_write_finish (
    OrgBluezGattCharacteristic1 *proxy,
    GVariant **out_fd,
    guint16 *out_mtu,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_gatt_characteristic1_call_acquire_write_sync (
    OrgBluezGattCharacteristic1 *proxy,
    GVariant *arg_options,
    GVariant **out_fd,
    guint16 *out_mtu,
    GCancellable *cancellable,
    GError **error);

void org_bluez_gatt_characteristic1_call_acquire_notify (
    OrgBluezGattCharacteristic1 *proxy,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_gatt_characteristic1_call_acquire_notify_finish (
    OrgBluezGattCharacteristic1 *proxy,
    GVariant **out_fd,
    guint16 *out_mtu,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_gatt_characteristic1_call_acquire_notify_sync (
    OrgBluezGattCharacteristic1 *proxy,
    GVariant *arg_options,
    GVariant **out_fd,
    guint16 *out_mtu,
    GCancellable *cancellable,
    GError **error);

void org_bluez_gatt_characteristic1_call_start_notify (
    OrgBluezGattCharacteristic1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_gatt_characteristic1_call_start_notify_finish (
    OrgBluezGattCharacteristic1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_gatt_characteristic1_call_start_notify_sync (
    OrgBluezGattCharacteristic1 *proxy,
    GCancellable *cancellable,
    GError **error);

void org_bluez_gatt_characteristic1_call_stop_notify (
    OrgBluezGattCharacteristic1 *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_gatt_characteristic1_call_stop_notify_finish (
    OrgBluezGattCharacteristic1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_gatt_characteristic1_call_stop_notify_sync (
    OrgBluezGattCharacteristic1 *proxy,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *org_bluez_gatt_characteristic1_get_uuid (OrgBluezGattCharacteristic1 *object);
gchar *org_bluez_gatt_characteristic1_dup_uuid (OrgBluezGattCharacteristic1 *object);
void org_bluez_gatt_characteristic1_set_uuid (OrgBluezGattCharacteristic1 *object, const gchar *value);

const gchar *org_bluez_gatt_characteristic1_get_service (OrgBluezGattCharacteristic1 *object);
gchar *org_bluez_gatt_characteristic1_dup_service (OrgBluezGattCharacteristic1 *object);
void org_bluez_gatt_characteristic1_set_service (OrgBluezGattCharacteristic1 *object, const gchar *value);

const gchar *org_bluez_gatt_characteristic1_get_value (OrgBluezGattCharacteristic1 *object);
gchar *org_bluez_gatt_characteristic1_dup_value (OrgBluezGattCharacteristic1 *object);
void org_bluez_gatt_characteristic1_set_value (OrgBluezGattCharacteristic1 *object, const gchar *value);

gboolean org_bluez_gatt_characteristic1_get_notifying (OrgBluezGattCharacteristic1 *object);
void org_bluez_gatt_characteristic1_set_notifying (OrgBluezGattCharacteristic1 *object, gboolean value);

const gchar *const *org_bluez_gatt_characteristic1_get_flags (OrgBluezGattCharacteristic1 *object);
gchar **org_bluez_gatt_characteristic1_dup_flags (OrgBluezGattCharacteristic1 *object);
void org_bluez_gatt_characteristic1_set_flags (OrgBluezGattCharacteristic1 *object, const gchar *const *value);

gboolean org_bluez_gatt_characteristic1_get_write_acquired (OrgBluezGattCharacteristic1 *object);
void org_bluez_gatt_characteristic1_set_write_acquired (OrgBluezGattCharacteristic1 *object, gboolean value);

gboolean org_bluez_gatt_characteristic1_get_notify_acquired (OrgBluezGattCharacteristic1 *object);
void org_bluez_gatt_characteristic1_set_notify_acquired (OrgBluezGattCharacteristic1 *object, gboolean value);


/* ---- */

#define TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY (org_bluez_gatt_characteristic1_proxy_get_type ())
#define ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY, OrgBluezGattCharacteristic1Proxy))
#define ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY, OrgBluezGattCharacteristic1ProxyClass))
#define ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY, OrgBluezGattCharacteristic1ProxyClass))
#define IS_ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY))
#define IS_ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_PROXY))

typedef struct _OrgBluezGattCharacteristic1Proxy OrgBluezGattCharacteristic1Proxy;
typedef struct _OrgBluezGattCharacteristic1ProxyClass OrgBluezGattCharacteristic1ProxyClass;
typedef struct _OrgBluezGattCharacteristic1ProxyPrivate OrgBluezGattCharacteristic1ProxyPrivate;

struct _OrgBluezGattCharacteristic1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgBluezGattCharacteristic1ProxyPrivate *priv;
};

struct _OrgBluezGattCharacteristic1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_bluez_gatt_characteristic1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezGattCharacteristic1Proxy, g_object_unref)
#endif

void org_bluez_gatt_characteristic1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezGattCharacteristic1 *org_bluez_gatt_characteristic1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezGattCharacteristic1 *org_bluez_gatt_characteristic1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_bluez_gatt_characteristic1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezGattCharacteristic1 *org_bluez_gatt_characteristic1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezGattCharacteristic1 *org_bluez_gatt_characteristic1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON (org_bluez_gatt_characteristic1_skeleton_get_type ())
#define ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON, OrgBluezGattCharacteristic1Skeleton))
#define ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON, OrgBluezGattCharacteristic1SkeletonClass))
#define ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON, OrgBluezGattCharacteristic1SkeletonClass))
#define IS_ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON))
#define IS_ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_GATT_CHARACTERISTIC1_SKELETON))

typedef struct _OrgBluezGattCharacteristic1Skeleton OrgBluezGattCharacteristic1Skeleton;
typedef struct _OrgBluezGattCharacteristic1SkeletonClass OrgBluezGattCharacteristic1SkeletonClass;
typedef struct _OrgBluezGattCharacteristic1SkeletonPrivate OrgBluezGattCharacteristic1SkeletonPrivate;

struct _OrgBluezGattCharacteristic1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgBluezGattCharacteristic1SkeletonPrivate *priv;
};

struct _OrgBluezGattCharacteristic1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_bluez_gatt_characteristic1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezGattCharacteristic1Skeleton, g_object_unref)
#endif

OrgBluezGattCharacteristic1 *org_bluez_gatt_characteristic1_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.bluez.GattDescriptor1 */

#define TYPE_ORG_BLUEZ_GATT_DESCRIPTOR1 (org_bluez_gatt_descriptor1_get_type ())
#define ORG_BLUEZ_GATT_DESCRIPTOR1(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_GATT_DESCRIPTOR1, OrgBluezGattDescriptor1))
#define IS_ORG_BLUEZ_GATT_DESCRIPTOR1(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_GATT_DESCRIPTOR1))
#define ORG_BLUEZ_GATT_DESCRIPTOR1_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_BLUEZ_GATT_DESCRIPTOR1, OrgBluezGattDescriptor1Iface))

struct _OrgBluezGattDescriptor1;
typedef struct _OrgBluezGattDescriptor1 OrgBluezGattDescriptor1;
typedef struct _OrgBluezGattDescriptor1Iface OrgBluezGattDescriptor1Iface;

struct _OrgBluezGattDescriptor1Iface
{
  GTypeInterface parent_iface;


  gboolean (*handle_read_value) (
    OrgBluezGattDescriptor1 *object,
    GDBusMethodInvocation *invocation,
    GVariant *arg_options);

  gboolean (*handle_write_value) (
    OrgBluezGattDescriptor1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_value,
    GVariant *arg_options);

  const gchar * (*get_characteristic) (OrgBluezGattDescriptor1 *object);

  const gchar * (*get_uuid) (OrgBluezGattDescriptor1 *object);

  const gchar * (*get_value) (OrgBluezGattDescriptor1 *object);

};

GType org_bluez_gatt_descriptor1_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_bluez_gatt_descriptor1_interface_info (void);
guint org_bluez_gatt_descriptor1_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_bluez_gatt_descriptor1_complete_read_value (
    OrgBluezGattDescriptor1 *object,
    GDBusMethodInvocation *invocation,
    const gchar *value);

void org_bluez_gatt_descriptor1_complete_write_value (
    OrgBluezGattDescriptor1 *object,
    GDBusMethodInvocation *invocation);



/* D-Bus method calls: */
void org_bluez_gatt_descriptor1_call_read_value (
    OrgBluezGattDescriptor1 *proxy,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_gatt_descriptor1_call_read_value_finish (
    OrgBluezGattDescriptor1 *proxy,
    gchar **out_value,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_gatt_descriptor1_call_read_value_sync (
    OrgBluezGattDescriptor1 *proxy,
    GVariant *arg_options,
    gchar **out_value,
    GCancellable *cancellable,
    GError **error);

void org_bluez_gatt_descriptor1_call_write_value (
    OrgBluezGattDescriptor1 *proxy,
    const gchar *arg_value,
    GVariant *arg_options,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_bluez_gatt_descriptor1_call_write_value_finish (
    OrgBluezGattDescriptor1 *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_bluez_gatt_descriptor1_call_write_value_sync (
    OrgBluezGattDescriptor1 *proxy,
    const gchar *arg_value,
    GVariant *arg_options,
    GCancellable *cancellable,
    GError **error);



/* D-Bus property accessors: */
const gchar *org_bluez_gatt_descriptor1_get_uuid (OrgBluezGattDescriptor1 *object);
gchar *org_bluez_gatt_descriptor1_dup_uuid (OrgBluezGattDescriptor1 *object);
void org_bluez_gatt_descriptor1_set_uuid (OrgBluezGattDescriptor1 *object, const gchar *value);

const gchar *org_bluez_gatt_descriptor1_get_characteristic (OrgBluezGattDescriptor1 *object);
gchar *org_bluez_gatt_descriptor1_dup_characteristic (OrgBluezGattDescriptor1 *object);
void org_bluez_gatt_descriptor1_set_characteristic (OrgBluezGattDescriptor1 *object, const gchar *value);

const gchar *org_bluez_gatt_descriptor1_get_value (OrgBluezGattDescriptor1 *object);
gchar *org_bluez_gatt_descriptor1_dup_value (OrgBluezGattDescriptor1 *object);
void org_bluez_gatt_descriptor1_set_value (OrgBluezGattDescriptor1 *object, const gchar *value);


/* ---- */

#define TYPE_ORG_BLUEZ_GATT_DESCRIPTOR1_PROXY (org_bluez_gatt_descriptor1_proxy_get_type ())
#define ORG_BLUEZ_GATT_DESCRIPTOR1_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_GATT_DESCRIPTOR1_PROXY, OrgBluezGattDescriptor1Proxy))
#define ORG_BLUEZ_GATT_DESCRIPTOR1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_GATT_DESCRIPTOR1_PROXY, OrgBluezGattDescriptor1ProxyClass))
#define ORG_BLUEZ_GATT_DESCRIPTOR1_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_GATT_DESCRIPTOR1_PROXY, OrgBluezGattDescriptor1ProxyClass))
#define IS_ORG_BLUEZ_GATT_DESCRIPTOR1_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_GATT_DESCRIPTOR1_PROXY))
#define IS_ORG_BLUEZ_GATT_DESCRIPTOR1_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_GATT_DESCRIPTOR1_PROXY))

typedef struct _OrgBluezGattDescriptor1Proxy OrgBluezGattDescriptor1Proxy;
typedef struct _OrgBluezGattDescriptor1ProxyClass OrgBluezGattDescriptor1ProxyClass;
typedef struct _OrgBluezGattDescriptor1ProxyPrivate OrgBluezGattDescriptor1ProxyPrivate;

struct _OrgBluezGattDescriptor1Proxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgBluezGattDescriptor1ProxyPrivate *priv;
};

struct _OrgBluezGattDescriptor1ProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_bluez_gatt_descriptor1_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezGattDescriptor1Proxy, g_object_unref)
#endif

void org_bluez_gatt_descriptor1_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezGattDescriptor1 *org_bluez_gatt_descriptor1_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezGattDescriptor1 *org_bluez_gatt_descriptor1_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_bluez_gatt_descriptor1_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgBluezGattDescriptor1 *org_bluez_gatt_descriptor1_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgBluezGattDescriptor1 *org_bluez_gatt_descriptor1_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_BLUEZ_GATT_DESCRIPTOR1_SKELETON (org_bluez_gatt_descriptor1_skeleton_get_type ())
#define ORG_BLUEZ_GATT_DESCRIPTOR1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_BLUEZ_GATT_DESCRIPTOR1_SKELETON, OrgBluezGattDescriptor1Skeleton))
#define ORG_BLUEZ_GATT_DESCRIPTOR1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_BLUEZ_GATT_DESCRIPTOR1_SKELETON, OrgBluezGattDescriptor1SkeletonClass))
#define ORG_BLUEZ_GATT_DESCRIPTOR1_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_BLUEZ_GATT_DESCRIPTOR1_SKELETON, OrgBluezGattDescriptor1SkeletonClass))
#define IS_ORG_BLUEZ_GATT_DESCRIPTOR1_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_BLUEZ_GATT_DESCRIPTOR1_SKELETON))
#define IS_ORG_BLUEZ_GATT_DESCRIPTOR1_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_BLUEZ_GATT_DESCRIPTOR1_SKELETON))

typedef struct _OrgBluezGattDescriptor1Skeleton OrgBluezGattDescriptor1Skeleton;
typedef struct _OrgBluezGattDescriptor1SkeletonClass OrgBluezGattDescriptor1SkeletonClass;
typedef struct _OrgBluezGattDescriptor1SkeletonPrivate OrgBluezGattDescriptor1SkeletonPrivate;

struct _OrgBluezGattDescriptor1Skeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgBluezGattDescriptor1SkeletonPrivate *priv;
};

struct _OrgBluezGattDescriptor1SkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_bluez_gatt_descriptor1_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgBluezGattDescriptor1Skeleton, g_object_unref)
#endif

OrgBluezGattDescriptor1 *org_bluez_gatt_descriptor1_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.ObjectManager */

#define TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER (org_freedesktop_dbus_object_manager_get_type ())
#define ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER, OrgFreedesktopDBusObjectManager))
#define IS_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER))
#define ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER, OrgFreedesktopDBusObjectManagerIface))

struct _OrgFreedesktopDBusObjectManager;
typedef struct _OrgFreedesktopDBusObjectManager OrgFreedesktopDBusObjectManager;
typedef struct _OrgFreedesktopDBusObjectManagerIface OrgFreedesktopDBusObjectManagerIface;

struct _OrgFreedesktopDBusObjectManagerIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get_managed_objects) (
    OrgFreedesktopDBusObjectManager *object,
    GDBusMethodInvocation *invocation);

  void (*interfaces_added) (
    OrgFreedesktopDBusObjectManager *object,
    const gchar *arg_object,
    GVariant *arg_interfaces);

  void (*interfaces_removed) (
    OrgFreedesktopDBusObjectManager *object,
    const gchar *arg_object,
    const gchar *const *arg_interfaces);

};

GType org_freedesktop_dbus_object_manager_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_freedesktop_dbus_object_manager_interface_info (void);
guint org_freedesktop_dbus_object_manager_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_freedesktop_dbus_object_manager_complete_get_managed_objects (
    OrgFreedesktopDBusObjectManager *object,
    GDBusMethodInvocation *invocation,
    GVariant *objects);



/* D-Bus signal emissions functions: */
void org_freedesktop_dbus_object_manager_emit_interfaces_added (
    OrgFreedesktopDBusObjectManager *object,
    const gchar *arg_object,
    GVariant *arg_interfaces);

void org_freedesktop_dbus_object_manager_emit_interfaces_removed (
    OrgFreedesktopDBusObjectManager *object,
    const gchar *arg_object,
    const gchar *const *arg_interfaces);



/* D-Bus method calls: */
void org_freedesktop_dbus_object_manager_call_get_managed_objects (
    OrgFreedesktopDBusObjectManager *proxy,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_object_manager_call_get_managed_objects_finish (
    OrgFreedesktopDBusObjectManager *proxy,
    GVariant **out_objects,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_object_manager_call_get_managed_objects_sync (
    OrgFreedesktopDBusObjectManager *proxy,
    GVariant **out_objects,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY (org_freedesktop_dbus_object_manager_proxy_get_type ())
#define ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY, OrgFreedesktopDBusObjectManagerProxy))
#define ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY, OrgFreedesktopDBusObjectManagerProxyClass))
#define ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY, OrgFreedesktopDBusObjectManagerProxyClass))
#define IS_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY))
#define IS_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_PROXY))

typedef struct _OrgFreedesktopDBusObjectManagerProxy OrgFreedesktopDBusObjectManagerProxy;
typedef struct _OrgFreedesktopDBusObjectManagerProxyClass OrgFreedesktopDBusObjectManagerProxyClass;
typedef struct _OrgFreedesktopDBusObjectManagerProxyPrivate OrgFreedesktopDBusObjectManagerProxyPrivate;

struct _OrgFreedesktopDBusObjectManagerProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgFreedesktopDBusObjectManagerProxyPrivate *priv;
};

struct _OrgFreedesktopDBusObjectManagerProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_freedesktop_dbus_object_manager_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusObjectManagerProxy, g_object_unref)
#endif

void org_freedesktop_dbus_object_manager_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusObjectManager *org_freedesktop_dbus_object_manager_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusObjectManager *org_freedesktop_dbus_object_manager_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_freedesktop_dbus_object_manager_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusObjectManager *org_freedesktop_dbus_object_manager_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusObjectManager *org_freedesktop_dbus_object_manager_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON (org_freedesktop_dbus_object_manager_skeleton_get_type ())
#define ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON, OrgFreedesktopDBusObjectManagerSkeleton))
#define ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON, OrgFreedesktopDBusObjectManagerSkeletonClass))
#define ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON, OrgFreedesktopDBusObjectManagerSkeletonClass))
#define IS_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON))
#define IS_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_OBJECT_MANAGER_SKELETON))

typedef struct _OrgFreedesktopDBusObjectManagerSkeleton OrgFreedesktopDBusObjectManagerSkeleton;
typedef struct _OrgFreedesktopDBusObjectManagerSkeletonClass OrgFreedesktopDBusObjectManagerSkeletonClass;
typedef struct _OrgFreedesktopDBusObjectManagerSkeletonPrivate OrgFreedesktopDBusObjectManagerSkeletonPrivate;

struct _OrgFreedesktopDBusObjectManagerSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgFreedesktopDBusObjectManagerSkeletonPrivate *priv;
};

struct _OrgFreedesktopDBusObjectManagerSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_freedesktop_dbus_object_manager_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusObjectManagerSkeleton, g_object_unref)
#endif

OrgFreedesktopDBusObjectManager *org_freedesktop_dbus_object_manager_skeleton_new (void);


/* ------------------------------------------------------------------------ */
/* Declarations for org.freedesktop.DBus.Properties */

#define TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES (org_freedesktop_dbus_properties_get_type ())
#define ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, OrgFreedesktopDBusProperties))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_GET_IFACE(o) (G_TYPE_INSTANCE_GET_INTERFACE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES, OrgFreedesktopDBusPropertiesIface))

struct _OrgFreedesktopDBusProperties;
typedef struct _OrgFreedesktopDBusProperties OrgFreedesktopDBusProperties;
typedef struct _OrgFreedesktopDBusPropertiesIface OrgFreedesktopDBusPropertiesIface;

struct _OrgFreedesktopDBusPropertiesIface
{
  GTypeInterface parent_iface;


  gboolean (*handle_get) (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface,
    const gchar *arg_name);

  gboolean (*handle_get_all) (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface);

  gboolean (*handle_set) (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    const gchar *arg_interface,
    const gchar *arg_name,
    GVariant *arg_value);

  void (*properties_changed) (
    OrgFreedesktopDBusProperties *object,
    const gchar *arg_interface,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);

};

GType org_freedesktop_dbus_properties_get_type (void) G_GNUC_CONST;

GDBusInterfaceInfo *org_freedesktop_dbus_properties_interface_info (void);
guint org_freedesktop_dbus_properties_override_properties (GObjectClass *klass, guint property_id_begin);


/* D-Bus method call completion functions: */
void org_freedesktop_dbus_properties_complete_get (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *value);

void org_freedesktop_dbus_properties_complete_set (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation);

void org_freedesktop_dbus_properties_complete_get_all (
    OrgFreedesktopDBusProperties *object,
    GDBusMethodInvocation *invocation,
    GVariant *properties);



/* D-Bus signal emissions functions: */
void org_freedesktop_dbus_properties_emit_properties_changed (
    OrgFreedesktopDBusProperties *object,
    const gchar *arg_interface,
    GVariant *arg_changed_properties,
    const gchar *const *arg_invalidated_properties);



/* D-Bus method calls: */
void org_freedesktop_dbus_properties_call_get (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_name,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_properties_call_get_finish (
    OrgFreedesktopDBusProperties *proxy,
    GVariant **out_value,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_properties_call_get_sync (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_name,
    GVariant **out_value,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_properties_call_set (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_properties_call_set_finish (
    OrgFreedesktopDBusProperties *proxy,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_properties_call_set_sync (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    const gchar *arg_name,
    GVariant *arg_value,
    GCancellable *cancellable,
    GError **error);

void org_freedesktop_dbus_properties_call_get_all (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    GCancellable *cancellable,
    GAsyncReadyCallback callback,
    gpointer user_data);

gboolean org_freedesktop_dbus_properties_call_get_all_finish (
    OrgFreedesktopDBusProperties *proxy,
    GVariant **out_properties,
    GAsyncResult *res,
    GError **error);

gboolean org_freedesktop_dbus_properties_call_get_all_sync (
    OrgFreedesktopDBusProperties *proxy,
    const gchar *arg_interface,
    GVariant **out_properties,
    GCancellable *cancellable,
    GError **error);



/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY (org_freedesktop_dbus_properties_proxy_get_type ())
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, OrgFreedesktopDBusPropertiesProxy))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, OrgFreedesktopDBusPropertiesProxyClass))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY, OrgFreedesktopDBusPropertiesProxyClass))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_PROXY))

typedef struct _OrgFreedesktopDBusPropertiesProxy OrgFreedesktopDBusPropertiesProxy;
typedef struct _OrgFreedesktopDBusPropertiesProxyClass OrgFreedesktopDBusPropertiesProxyClass;
typedef struct _OrgFreedesktopDBusPropertiesProxyPrivate OrgFreedesktopDBusPropertiesProxyPrivate;

struct _OrgFreedesktopDBusPropertiesProxy
{
  /*< private >*/
  GDBusProxy parent_instance;
  OrgFreedesktopDBusPropertiesProxyPrivate *priv;
};

struct _OrgFreedesktopDBusPropertiesProxyClass
{
  GDBusProxyClass parent_class;
};

GType org_freedesktop_dbus_properties_proxy_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusPropertiesProxy, g_object_unref)
#endif

void org_freedesktop_dbus_properties_proxy_new (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_proxy_new_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_proxy_new_sync (
    GDBusConnection     *connection,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);

void org_freedesktop_dbus_properties_proxy_new_for_bus (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GAsyncReadyCallback  callback,
    gpointer             user_data);
OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_proxy_new_for_bus_finish (
    GAsyncResult        *res,
    GError             **error);
OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_proxy_new_for_bus_sync (
    GBusType             bus_type,
    GDBusProxyFlags      flags,
    const gchar         *name,
    const gchar         *object_path,
    GCancellable        *cancellable,
    GError             **error);


/* ---- */

#define TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON (org_freedesktop_dbus_properties_skeleton_get_type ())
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_CAST ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, OrgFreedesktopDBusPropertiesSkeleton))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_CAST ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, OrgFreedesktopDBusPropertiesSkeletonClass))
#define ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_GET_CLASS(o) (G_TYPE_INSTANCE_GET_CLASS ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON, OrgFreedesktopDBusPropertiesSkeletonClass))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON(o) (G_TYPE_CHECK_INSTANCE_TYPE ((o), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))
#define IS_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON_CLASS(k) (G_TYPE_CHECK_CLASS_TYPE ((k), TYPE_ORG_FREEDESKTOP_DBUS_PROPERTIES_SKELETON))

typedef struct _OrgFreedesktopDBusPropertiesSkeleton OrgFreedesktopDBusPropertiesSkeleton;
typedef struct _OrgFreedesktopDBusPropertiesSkeletonClass OrgFreedesktopDBusPropertiesSkeletonClass;
typedef struct _OrgFreedesktopDBusPropertiesSkeletonPrivate OrgFreedesktopDBusPropertiesSkeletonPrivate;

struct _OrgFreedesktopDBusPropertiesSkeleton
{
  /*< private >*/
  GDBusInterfaceSkeleton parent_instance;
  OrgFreedesktopDBusPropertiesSkeletonPrivate *priv;
};

struct _OrgFreedesktopDBusPropertiesSkeletonClass
{
  GDBusInterfaceSkeletonClass parent_class;
};

GType org_freedesktop_dbus_properties_skeleton_get_type (void) G_GNUC_CONST;

#if GLIB_CHECK_VERSION(2, 44, 0)
G_DEFINE_AUTOPTR_CLEANUP_FUNC (OrgFreedesktopDBusPropertiesSkeleton, g_object_unref)
#endif

OrgFreedesktopDBusProperties *org_freedesktop_dbus_properties_skeleton_new (void);


G_END_DECLS

#endif /* __BLE_APP_CLIENT_H__ */
